{"version":3,"file":"static/js/664.8fd74d69.chunk.js","mappings":"gOAKe,SAASA,IAEpB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAClBE,GAAWC,EAAAA,EAAAA,MAgBjB,OAAQ,+BACJ,kBAAMC,SAfe,SAACC,GACtBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GAASO,EAAAA,EAAAA,IAAM,CACXC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACR,EAMG,WACA,kBAAOC,QAAShB,EAAhB,oBACA,kBACAiB,GAAIjB,EACJkB,KAAK,QACLC,KAAK,WAEL,mBACA,kBAAOH,QAASd,EAAhB,uBACA,kBACAe,GAAIf,EACJgB,KAAK,WACLC,KAAK,cAEL,mBACJ,mBAAQA,KAAK,SAAb,wBAGH,C,wDC3CD,IAkBIlB,EAAS,WAGX,IAH0B,IAAdmB,EAAc,uDAAP,GACfH,EAAK,GACLI,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfH,GADEQ,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOR,CACR,C","sources":["pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from \"nanoid\"\nimport { useDispatch} from \"react-redux\";\nimport { logIn } from \"redux/user/operation\";\n\n\nexport default function LoginPage() {\n  \n    const inputIdEmail = nanoid();\n    const inputIdPassword = nanoid();\n    const dispatch = useDispatch();\n\n    const onGetUserAccount = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        dispatch(logIn({\n            email: form.elements.email.value,\n            password: form.elements.password.value\n            }))\n        \n        form.reset();\n    }\n \n\n\n\n    return (<>\n        <form onSubmit={onGetUserAccount}>\n        <label htmlFor={inputIdEmail}>Email</label>    \n        <input\n        id={inputIdEmail}\n        name=\"email\"        \n        type=\"email\">        \n        </input>\n        <br/>    \n        <label htmlFor={inputIdPassword}>Password</label>    \n        <input\n        id={inputIdPassword}\n        name=\"password\"        \n        type=\"password\">\n        </input>\n        <br/>       \n    <button type=\"submit\">Log In</button>        \n    </form>    \n    </>)\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["LoginPage","inputIdEmail","nanoid","inputIdPassword","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","htmlFor","id","name","type","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}