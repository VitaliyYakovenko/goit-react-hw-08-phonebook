{"version":3,"file":"static/js/478.c1517369.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContacts } from \"redux/contacts/operation\";\nimport { nanoid } from \"nanoid\";\n\n\nexport default function ContactForm() {\n    const contacts = useSelector(state => state.contacts.items);\n    const dispatch = useDispatch();\n    const InputIdName = nanoid();\n    const InputIdPhone = nanoid();\n    const [name, setName] = useState(\"\");\n    const [number, setNumber] = useState(\"\");\n\n     const onInputChange = (e) => {\n        const { name, value } = e.currentTarget;\n    \n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n        \n    };\n\n        const onAddContact = (e) => {\n        e.preventDefault();\n\n        if (contacts.find(contact => contact.name === name)) {\n        alert(`${name} is already in contacts.`);\n         reset();    \n         return;\n        };\n        \n        const user = {name,number}\n            \n        dispatch(addContacts(user))\n        reset();\n    };\n\n    const reset = () => {\n        setName(\"\");\n        setNumber(\"\");\n    } \n\n    return (\n           <form  \n            onSubmit={onAddContact}\n            >\n            <label \n            htmlFor={InputIdName}>Name</label>    \n            <input      \n            onChange={onInputChange}\n            type=\"text\"\n            value={name}    \n            name=\"name\"    \n            id={InputIdName}    \n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            />\n           <label \n            htmlFor={InputIdPhone}>Phone</label> \n            <input\n            onChange={onInputChange}\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            id={InputIdPhone}        \n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n             />\n            <br/>\n            <button\n            type=\"submit\">Add contact</button>\n        </form>\n    )\n}","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/slice';\nimport { nanoid } from 'nanoid'\n\n\n\nexport default function Filter() {\n    const InputIdFilter = nanoid();\n    const filter = useSelector(state => state.filter);\n    \n    const dispatch = useDispatch();\n    const onChange = (e) => {\n        dispatch(changeFilter(e.target.value));\n    }\n        \n    return (\n        <div>\n            <label\n            htmlFor={InputIdFilter}>Find contacts by name</label>\n            <input\n            onChange={onChange}\n            type=\"text\"\n            name=\"filter\"     \n            value={filter}\n            id={InputIdFilter}\n            >\n            </input>\n        </div>    \n  )   \n}","import { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { useEffect } from 'react';\nimport Loader from \"../Loader/Loader\"\nimport { deleteContacts } from 'redux/contacts/operation';\n\n\nexport default function ContactList() {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const error = useSelector(state => state.contacts.error);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n   \n  },[dispatch])\n\n  const normalizedName =  filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n  contact.name.toLowerCase().includes(normalizedName));\n \n   \n   \n  if (error === \"rejected\") {\n    return (<div>Not found contacts</div>)\n  } \n   \n  if (isLoading) {\n    return (<div><Loader/></div>)\n  }        \n  \n  if (contacts.length === 0) {\n    return (<div>Add your contacts</div>)\n  }\n\n  if (!isLoading) {\n    return (\n          <ul>\n            {visibleContacts.map(contact => (\n          <li\n          key={contact.id}>\n          <span>{contact.name}</span>\n          <span>{contact.number}</span>   \n          <button\n          onClick={() => dispatch(deleteContacts(contact.id))}>\n          Delete\n          </button>       \n          </li>\n          ))}\n          </ul>\n      )\n  }\n}\n\n","import ContactForm from \"components/ContactForm/ContactForm\";\nimport Filter from \"components/Filter/Filter\";\nimport ContactList from \"components/ContactList/ContactList\";\n\n\n\nexport default function ContactsPage() {\n    \n    return (<div>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter/>\n        <ContactList/>\n    </div>)\n} ","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ContactForm","contacts","useSelector","state","items","dispatch","useDispatch","InputIdName","nanoid","InputIdPhone","useState","name","setName","number","setNumber","onInputChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","contact","alert","user","addContacts","htmlFor","onChange","type","id","pattern","title","required","Filter","InputIdFilter","filter","changeFilter","target","ContactList","error","isLoading","useEffect","fetchContacts","normalizedName","toLowerCase","visibleContacts","includes","Loader","length","map","onClick","deleteContacts","ContactsPage","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}