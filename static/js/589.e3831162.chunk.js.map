{"version":3,"file":"static/js/589.e3831162.chunk.js","mappings":"0OAKe,SAASA,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAiBxB,OACA,+BACA,SAAC,IAAD,CAAKG,MAAO,CACVC,UAAW,GACXC,WAAY,OACZC,YAAa,OACbC,MAAO,KAJT,UAMQ,kBAAMC,SAvBc,SAACC,GACzBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEff,GAASgB,EAAAA,EAAAA,IACT,CACAC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGjCL,EAAKQ,OACR,EAWO,WACI,kBAAOC,QAASrB,EAAhB,uBACA,kBACIsB,GAAItB,EACJuB,KAAK,OACLR,KAAK,UAET,mBACA,kBAAOM,QAASnB,EAAhB,oBACA,kBACIoB,GAAIpB,EACJqB,KAAK,QACLR,KAAK,WAET,mBACA,kBAAOM,QAASlB,EAAhB,uBACA,kBACImB,GAAInB,EACJoB,KAAK,WACLR,KAAK,cAET,mBACA,mBAAQQ,KAAK,SAAb,4BAIf,C,wDC5DD,IAkBItB,EAAS,WAGX,IAH0B,IAAduB,EAAc,uDAAP,GACfF,EAAK,GACLG,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfF,GADEO,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOP,CACR,C","sources":["pages/RegisterPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useDispatch} from 'react-redux';\nimport { register } from 'redux/user/operation';\nimport {Box} from \"@mui/material\";\n// TextField\nexport default function RegisterPage() {\n    \n    const dispatch = useDispatch();\n    const inputIdName = nanoid();\n    const inputIdEmail = nanoid();\n    const inputIdPassword = nanoid();\n\n    const onCreateUserAccount = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n\n        dispatch(register(\n        {\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value\n        }))\n        \n        form.reset();\n    }\n\n   \n    return (\n    <>\n    <Box style={{\n      marginTop: 20,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      width: 400\n            }}>\n            <form onSubmit={onCreateUserAccount}>\n                <label htmlFor={inputIdName}>Username</label>\n                <input\n                    id={inputIdName}\n                    type=\"text\"\n                    name=\"name\"\n                   />\n                <br />\n                <label htmlFor={inputIdEmail}>Email</label>\n                <input\n                    id={inputIdEmail}\n                    type=\"email\"\n                    name=\"email\"\n                  />\n                <br />\n                <label htmlFor={inputIdPassword}>Password</label>\n                <input\n                    id={inputIdPassword}\n                    type=\"password\"\n                    name=\"password\"\n                 />\n                <br />\n                <button type=\"submit\">Register</button>\n            </form>\n    </Box>\n    </>)\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["RegisterPage","dispatch","useDispatch","inputIdName","nanoid","inputIdEmail","inputIdPassword","style","marginTop","marginLeft","marginRight","width","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","htmlFor","id","type","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}